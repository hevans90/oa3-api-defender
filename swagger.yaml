openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/tengroup/tenplatform-api/1.0.0
info:
  description: A spec for the Ten Platform API.
  version: "1.0.0"
  title: Ten Platform API
  contact:
    email: someone@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /plans:
    get:
      tags:
        - plans
      description: Returns an array of all membership plans
      responses: 
        '200':
          description: A JSON array of membership plans
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipPlan'
  /plans/{id}:
    get:
      tags:
        - plans
      description: Returns a single membership plan, by id
      parameters:
        - name: id
          in: path
          description: id of plan to fetch
          required: true
          schema:
            type: number
        - name: frequency
          in: query
          description: Payment frequency(i.e monthly or yearly)
          required: true
          schema:
            type: string
        - name: promoCode
          in: query
          description: A promo code to apply to a membership plan
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A single membership plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
  /user:
    get:
      description: Fetch the currently authenticated user
      tags:
        - user
      responses:
        '200':
          description: Currently authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    post:
      description: Create a new user
      tags:
        - user
      requestBody:
        description: Details required to create a new user
        content:
          application/json:
            schema:
              required:
                - username
                - password
                - member
              properties:
                username:
                  type: string
                  example: 'user@email.com'
                password:
                  type: string
                  example: 'SuperSweetStrongPassword123!'
                member: 
                  $ref: '#/components/schemas/Member'
                membershipPlan:
                  $ref: '#/components/schemas/MembershipPlan' 
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                User:
                  required:
                    - username
                  properties:
                    
                $ref: '#/components/schemas/User'
  
  /user/authenticate:
    post:
      description: Authenticate a user
      tags:
        - user
      requestBody:
        description: Authentication credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationPayload'
              
      responses:
        '200':
          description: Authentication token
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  token:
                    type: string
              
  /restaurants:
    get:
      tags:
        - restaurants
      description: Returns all restaurants
      summary: Find Restaurants
      responses:
        '200':
          description: A list of restaurants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
  /restaurants/{id}:
    get:
      tags:
        - restaurants
      description: Returns restaurants based on ID
      summary: Find restaurants by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: restaurant response
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
  /celebrityChefs:
    get:
      tags:
        - celebrityChefs
      description: Returns all Celebrity Chefs
      summary: Find Celebrity Chefs
      responses:
        '200':
          description: A list of Celebrity Chefs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CelebrityChef'
  /celebrityChefs/{id}:
    get:
      tags:
        - celebrityChefs
      description: Returns Celebrity Chefs based on ID
      summary: Find Celebrity Chefs by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Celebrity Chef.
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CelebrityChef'
  /events:
    get:
      tags:
        - events
      description: Returns all Events
      summary: Find Events
      responses:
        '200':
          description: A list of Events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      tags:
        - events
      description: Returns Events based on ID
      summary: Find Events by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Event.
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /artists:
    get:
      tags:
        - artists
      description: Returns all Artists
      summary: Find Artists
      responses:
        '200':
          description: A list of Artists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
  /artists/{id}:
    get:
      tags:
        - artists
      description: Returns Artists based on ID
      summary: Find Artists by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Artist.
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
  /brands:
    get:
      tags:
        - brands
      description: Returns all Brands
      summary: Find Brands
      responses:
        '200':
          description: A list of Brands.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
  /brands/{id}:
    get:
      tags:
        - brands
      description: Returns Brands based on ID
      summary: Find Brands by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Brand.
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
  /benefits:
    get:
      tags:
        - benefits
      description: Returns all Benefits
      summary: Find Benefits
      responses:
        '200':
          description: A list of Benefits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Benefit'
  /benefits/{id}:
    get:
      tags:
        - benefits
      description: Returns Benefits based on ID
      summary: Find Benefits by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Benefit.
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Benefit'
components:
  schemas:
    MembershipPlan:
      required:
        - id
        - name
        - description
        - annualMembershipPrice
        - monthlyMembershipPrice
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'Classic'
        description:
          type: string
          example: Our most popular option
        annualMembershipPrice:
          $ref: '#/components/schemas/Price'
        monthlyMembershipPrice:
          $ref: '#/components/schemas/Price'
        promoCode:
          type: string
          example: EARLYBIRD
        totalCost:
          $ref: '#/components/schemas/Price'
    Price:
      required:
        - amount
        - currencyCode
      properties:
        amount:
          type: number
          example: 5.35
        currencyCode:
          type: string
          example: "GBP"
    User:
      required:
        - id
        - email
      properties:
        id:
          type: integer
        email:
          type: string
          example: user@email.com
    
    AuthenticationPayload:
      required:
        - userName
        - password
      properties:
        userName:
          type: string
        password:
          type: string
    
    Member:
      required:
        - id
        - title
        - firstName
        - lastName
        - emailAddress
        - address
      properties:
        id:
          type: integer
        title:
          type: string
          enum: [Mr., Mrs., Ms., Miss]
        firstName:
          type: string
          example: 'Gemima'
        lastName:
          type: string
          example: 'Puddleduck'
        emailAddress:
          type: string  
          example: 'gemimapuddleduck@email.com'
        address:
          $ref: '#/components/schemas/Address'
    Address:
      required:
        - addressType
        - houseNumber
        - street1
        - street2
        - city
        - state
        - country
        - postcode
      properties:
        addressType:
          type: string
          example: 'home'
        houseNumber:
          type: integer
        street1:
          type: string
          example: Atlantic Heights
        street2:
          type: string
          example: Barnacle Square
        city:
          type: string
          example: London
        state:
          type: string
          example: London
        country:
          type: string
          example: UK
        postcode:
          type: string
          example: BA12GZ
    Restaurant:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Sushi Samba'
           description:
             example: 'The ultimate sushi experience.'
    CelebrityChef:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Gordon Ramsey'
           description:
             example: 'The meanest chef around.'
    Event:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Ed Sheeran feat. Teletubbies live at the 02'
           description:
             example: 'A seriously meta musical experience.'
    Artist:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Pendulum'
           description:
             example: 'The best DnB band ever.'
    Brand:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Apple'
           description:
             example: 'The most overpriced & overrated tech ever :D.'
    Benefit:
      allOf:
       - $ref: '#/components/schemas/EntityDetails'
       - type: object
         properties:
           name:
             example: 'Free Nandos Butterfly Burger (extra-hot ONLY)'
           description:
             example: 'No cowards allowed.'
    EntityDetails:
      type: object
      required:
        - name
        - id
      properties:
        id: 
          type: integer
          description: entity ID
          example: 0
        name:
          type: string
          description: entity name
          example: 'name of entity'
        description:
          type: string
          description: 'entity description'
          example: 'This entity has a very nice, long, punctuated description.'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    Image:
      type: object
      properties:
        url:
          type: string
          description: 'Absolute URL for the image'
          example: 'https://imgur.com/gallery/u1SZp'